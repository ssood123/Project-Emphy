#include "I2Cdev.h"

#include "MPU6050_6Axis_MotionApps20.h"

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif
bool getinitial=true;
MPU6050 mpu;
int count=0;
float heading=0;
int rightVibrate=3;
int leftVibrate=4;
int turnAngle=0;
int turnmag=0;
// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorFloat gravity;    // [x, y, z]            gravity vector
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector


volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
}

void setup() {
    pinMode(A0,OUTPUT);
    digitalWrite(A0,HIGH);
    pinMode(A1,OUTPUT);
    pinMode(A3,OUTPUT);
    pinMode(A2,OUTPUT);
    pinMode(6,INPUT_PULLUP);
    pinMode(7,INPUT_PULLUP);
    pinMode(8,INPUT_PULLUP);
    pinMode(leftVibrate,OUTPUT);
    pinMode(rightVibrate,OUTPUT);
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
        TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    // initialize serial communication
    // (115200 chosen because it is required for Teapot Demo output, but it's
    // really up to you depending on your project)
    Serial.begin(115200);
    while (!Serial); // wait for Leonardo enumeration, others continue immediately

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    mpu.initialize();

    // verify connection
    Serial.println(F("Testing device connections..."));
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    devStatus = mpu.dmpInitialize();

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(30);
    mpu.setYGyroOffset(-64);
    mpu.setZGyroOffset(70);
    mpu.setZAccelOffset(1768); // 1688 factory default for my test chip

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
        attachInterrupt(0, dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }
    

}

void loop() {
    // if programming failed, don't try to do anything
    if (!dmpReady) return;

    // wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
    }

    // reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    mpuIntStatus = mpu.getIntStatus();

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();
  
    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
        // reset so we can continue cleanly
        mpu.resetFIFO();
        Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
        
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;
        // display Euler angles in degrees
        mpu.dmpGetQuaternion(&q, fifoBuffer);
        mpu.dmpGetGravity(&gravity, &q);
        mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
        float reading=ypr[0] * 180/M_PI;
        if(getinitial){
          heading=reading;
          getinitial=false;
        }

        Serial.println(reading);
        Serial.println(heading);

        //acknowledging voice command and telling user when robot will start
        if(digitalRead(6)==1 && digitalRead(7)==1 && digitalRead(8)==1){
          Serial.println("voice recieved");
          digitalWrite(rightVibrate,HIGH);
          digitalWrite(leftVibrate,HIGH);
        }
        else{
          digitalWrite(rightVibrate,LOW);
          digitalWrite(leftVibrate,LOW);
        }

        //choosing a left or right turn
        if(digitalRead(6)==1 && digitalRead(7)==0 && digitalRead(8)==1){
          turnAngle=-45;
        }
        if(digitalRead(6)==1 && digitalRead(7)==1 && digitalRead(8)==0){
          turnAngle=45;
        }

        //setting turn magnitude
        if(digitalRead(6)==0 && digitalRead(7)==0 && digitalRead(8)==1){
          turnmag=1;
        }
        if(digitalRead(6)==0 && digitalRead(7)==1 && digitalRead(8)==0){
          turnmag=2;
        }
        if(digitalRead(6)==0 && digitalRead(7)==1 && digitalRead(8)==1){
          turnmag=3;
        }
        if(digitalRead(6)==1 && digitalRead(7)==0 && digitalRead(8)==0){
          turnmag=1;
        }

        //change the heading for a turn
        if(turnAngle!=0 && turnmag!=0){
          heading=heading+(turnAngle*turnmag);
          turnAngle=0;
          turnmag=0;
        }

        //get robot back on course and perform turns
        if(reading>(heading+10)){
          Serial.println("left");
          digitalWrite(rightVibrate,HIGH);
          digitalWrite(A2,LOW);
          digitalWrite(A1,LOW);
          digitalWrite(A3,HIGH);
        }
        
        if(reading<(heading-10)){
          Serial.println("right");
          digitalWrite(leftVibrate,HIGH);
          digitalWrite(A2,HIGH);
          digitalWrite(A1,LOW);
          digitalWrite(A3,LOW);
        }
        if(abs(heading-reading)<2){
          Serial.println("forward");
          digitalWrite(rightVibrate,LOW);
          digitalWrite(leftVibrate,LOW);
          digitalWrite(A2,LOW);
          digitalWrite(A1,LOW);
          digitalWrite(A3,LOW);
        }
    }
}
