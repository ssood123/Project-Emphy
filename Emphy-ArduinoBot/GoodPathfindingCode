import pygame, sys
from pygame.locals import *
import math
import random
import numpy as np
import easygui

maze = [];
start = (0,6);
end = (19,19);

class Node():
  def __init__(self,parent=None,position=None):
    self.parent = parent;
    self.position = position;
    self.g = 0;
    self.h = 0;
    self.f = 0;

  def __eq__(self,other):
    return self.position == other.position;

def astar(maze,start,end):
  start_node = Node(None,start);
  start_node.g = start_node.h = start_node.f = 0;
  end_node = Node(None,end);
  end_node.g = end_node.h = end_node.f = 0;
  open_list = [];
  closed_list = [];
  open_list.append(start_node);
  while len(open_list) > 0:
    current_node = open_list[0];
    current_index = 0;
    for index, item in enumerate(open_list):
      if item.f < current_node.f:
        current_node = item;
        current_index = index;
    open_list.pop(current_index);
    closed_list.append(current_node);
    if current_node == end_node:
      path = [];
      current = current_node;
      while current is not None:
        path.append(current.position);
        current = current.parent;
      return path[::-1];
    children = [];
    for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
      node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1]);
      if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:
        continue;
      if maze[node_position[0]][node_position[1]] != 0:
        continue;
      new_node = Node(current_node, node_position);
      children.append(new_node);
    for child in children:
      for closed_child in closed_list:
        if child == closed_child:
          continue;
      child.g = current_node.g + 1;
      child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2);
      child.f = child.g + child.h;
      for open_node in open_list:
        if child == open_node and child.g > open_node.g:
          continue;
      open_list.append(child);

def main():

  locations=[(0,0),(0,9),(9,0),(19,0),(0,15),(3,19),(19,19)]
  scaleFactor = 30;
  numberOfSquares = 20;
  backgroundColor = (255,255,255);
  screenWidth=scaleFactor*numberOfSquares;
  screenHeight=scaleFactor*numberOfSquares;
  displayGridLines = True;
  mapSelect=easygui.enterbox("Enter Map Name. Note: SAME NAME AS A PREVIOUS MAP WILL OVERRIDE THAT MAP'S DATA")

  w, h = numberOfSquares, numberOfSquares;
  maze = [[0 for x in range(w)] for y in range(h)]

  pygame.init();
  screen = pygame.display.set_mode((screenWidth,screenHeight));
  screen.fill(backgroundColor);

  if displayGridLines == True:
    x = 0;
    while x*scaleFactor < screenWidth:
      pygame.draw.line(screen,(0,0,0),(x*scaleFactor,0),(x*scaleFactor,screenHeight));
      x = x + 1;
    pygame.display.update();
    y = 0;
    while y*scaleFactor < screenHeight:
      pygame.draw.line(screen,(0,0,0),(0,screenHeight-y*scaleFactor),(screenWidth,screenHeight-y*scaleFactor));
      y = y + 1;
    pygame.display.update();

  for h in range(0,len(locations)):

      pygame.draw.rect(screen,(255,0,0),[locations[h][1]*scaleFactor,locations[h][0]*scaleFactor,scaleFactor,scaleFactor]);
  #pygame.draw.rect(screen,(255,0,0),[end[1]*scaleFactor,end[0]*scaleFactor,scaleFactor,scaleFactor]);

  while True:
    for event in pygame.event.get():
      if event.type == QUIT:
        pygame.quit();
        sys.exit();
      if event.type == pygame.MOUSEBUTTONUP:
        mousePos = pygame.mouse.get_pos();
        mousePosX = int(mousePos[0]/scaleFactor);
        mousePosY = int(mousePos[1]/scaleFactor);
        maze[mousePosY][mousePosX] = 1;
        pygame.draw.rect(screen,(0,0,0),[mousePosX*scaleFactor,mousePosY*scaleFactor,scaleFactor,scaleFactor]);
      if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_SPACE:
          pygame.image.save(screen,mapSelect+".jpg")
          longestpath=0
          rows, cols = (len(locations)*10+len(locations), 0)
          indexedpathcontainer = [[0]*cols]*rows
          indexeddircontainer=[[""]*cols]*rows
          for i in range(0,len(locations)):
               for j in range(0,len(locations)):
                   if(locations[i][0]!=locations[j][0] and locations[i][1]!=locations[j][1]):
                       path = astar(maze,locations[i],locations[j]);
                       finaldir=[];
                       for d in range(1,len(path)):
                           #print(d)
                           xrel=path[d][0]-path[d-1][0];
                           yrel=path[d][1]-path[d-1][1];
                           if (xrel==-1 and yrel==-1):
                             finaldir.append("northwest");

                           if (xrel==0 and yrel==-1):
                             finaldir.append("north");

                           if (xrel==1 and yrel==-1):
                             finaldir.append("northeast");

                           if (xrel==1 and yrel==0):
                             finaldir.append("east");

                           if (xrel==1 and yrel==1):
                             finaldir.append("southeast");

                           if (xrel==0 and yrel==1):
                             finaldir.append("south");

                           if (xrel==-1 and yrel==1):
                             finaldir.append("southwest");

                           if (xrel==-1 and yrel==0):
                             finaldir.append("west");

                       directions = {
                                  "north": 0,
                                  "northeast": 45,
                                  "east": 90,
                                  "southeast": 135,
                                  "south": 180,
                                  "southwest": 225,
                                  "west": 270,
                                  "northwest": 315
                                  }
                       turnangles=[]
                       firstlast=[]
                       for f in range(1,len(finaldir)):
                           temp=directions[finaldir[f]]-directions[finaldir[f-1]]
                           if (abs(temp)>180):
                               temp=abs(temp)-360
                           turnangles.append(temp)
                       firstlast.append(finaldir[0])
                       firstlast.append(finaldir[len(finaldir)-1])
                       if(len(finaldir)>longestpath):
                           longestpath=len(finaldir)
                       index=str(i+1)+str(j+1)
                       indexedpathcontainer[int(index)]=turnangles
                       indexeddircontainer[int(index)]=firstlast

          pathsname="int pathcontainer["+str(rows)+"]["+str(longestpath)+"]="
          dirsname="int dircontainer["+str(rows)+"]["+str(2)+"]="
          
          print(pathsname)
          print(indexedpathcontainer,";")
          print(dirsname)
          print(indexeddircontainer,";")
          sys.exit()


    pygame.display.update();


if __name__ == "__main__":
  main();
